Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> statement program
Rule 3     expression -> expression_num
Rule 4     expression -> expression_sign
Rule 5     expression -> expression_op
Rule 6     expression -> expression_incr
Rule 7     statement -> expression -
Rule 8     statement -> assignation -
Rule 9     statement -> structure
Rule 10    statement -> initialization -
Rule 11    statement -> PRINT TEXT -
Rule 12    statement -> PRINT IDENTIFIER -
Rule 13    statement -> PRINTERR TEXT -
Rule 14    statement -> PRINTERR IDENTIFIER -
Rule 15    statement -> BREAK -
Rule 16    bloc -> OPEN_BRACE program CLOSE_BRACE
Rule 17    structure -> whileloop bloc
Rule 18    structure -> forloop bloc
Rule 19    structure -> if bloc
Rule 20    structure -> if bloc ELSE bloc
Rule 21    forloop -> FOR ( initialization_num - comparison - expression )
Rule 22    forloop -> FORNEG ( initialization_num - NUMBER )
Rule 23    forloop -> FORNEG ( initialization_num - IDENTIFIER )
Rule 24    forloop -> FORPOS ( initialization_num - NUMBER )
Rule 25    forloop -> FORPOS ( initialization_num - IDENTIFIER )
Rule 26    whileloop -> WHILE ( comparison )
Rule 27    if -> IF ( comparison )
Rule 28    comparison_operator -> GREATER_OP
Rule 29    comparison_operator -> LESSER_OP
Rule 30    comparison_operator -> EQUALS
Rule 31    comparison_operator -> GREATER_OR_EQUALS_OP
Rule 32    comparison_operator -> LESSER_OR_EQUALS_OP
Rule 33    comparison_operator -> NOT_EQUALS
Rule 34    comparison -> expression comparison_operator expression
Rule 35    initialization -> initialization_num
Rule 36    initialization -> initialization_string
Rule 37    initialization -> initialization_bool
Rule 38    initialization_num -> FLOAT IDENTIFIER AFFECTATION NUMBER
Rule 39    initialization_num -> FLOAT IDENTIFIER AFFECTATION IDENTIFIER
Rule 40    initialization_num -> INT IDENTIFIER AFFECTATION NUMBER
Rule 41    initialization_num -> INT IDENTIFIER AFFECTATION IDENTIFIER
Rule 42    initialization_string -> STRING IDENTIFIER AFFECTATION TEXT
Rule 43    initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION TRUE
Rule 44    initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION FALSE
Rule 45    initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION IDENTIFIER
Rule 46    assignation -> IDENTIFIER AFFECTATION expression
Rule 47    expression_num -> NUMBER
Rule 48    expression_num -> IDENTIFIER
Rule 49    expression_sign -> ADD_OP expression
Rule 50    expression_sign -> SUB_OP expression
Rule 51    expression_op -> expression ADD_OP expression
Rule 52    expression_op -> expression SUB_OP expression
Rule 53    expression_op -> expression MUL_OP expression
Rule 54    expression_op -> expression DIV_OP expression
Rule 55    expression_incr -> INCR_OP IDENTIFIER
Rule 56    expression_incr -> DECR_OP IDENTIFIER
Rule 57    expression -> ( expression )

Terminals, with rules where they appear

(                    : 21 22 23 24 25 26 27 57
)                    : 21 22 23 24 25 26 27 57
-                    : 7 8 10 11 12 13 14 15 21 21 22 23 24 25
ADD_OP               : 49 51
AFFECTATION          : 38 39 40 41 42 43 44 45 46
BOOLEAN              : 43 44 45
BREAK                : 15
CLOSE_BRACE          : 16
DECR_OP              : 56
DIV_OP               : 54
ELSE                 : 20
EQUALS               : 30
FALSE                : 44
FLOAT                : 38 39
FOR                  : 21
FORNEG               : 22 23
FORPOS               : 24 25
GREATER_OP           : 28
GREATER_OR_EQUALS_OP : 31
IDENTIFIER           : 12 14 23 25 38 39 39 40 41 41 42 43 44 45 45 46 48 55 56
IF                   : 27
INCR_OP              : 55
INT                  : 40 41
LESSER_OP            : 29
LESSER_OR_EQUALS_OP  : 32
MUL_OP               : 53
NOT_EQUALS           : 33
NUMBER               : 22 24 38 40 47
OPEN_BRACE           : 16
PRINT                : 11 12
PRINTERR             : 13 14
STRING               : 42
SUB_OP               : 50 52
TEXT                 : 11 13 42
TRUE                 : 43
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

assignation          : 8
bloc                 : 17 18 19 20 20
comparison           : 21 26 27
comparison_operator  : 34
expression           : 7 21 34 34 46 49 50 51 51 52 52 53 53 54 54 57
expression_incr      : 6
expression_num       : 3
expression_op        : 5
expression_sign      : 4
forloop              : 18
if                   : 19 20
initialization       : 10
initialization_bool  : 37
initialization_num   : 21 22 23 24 25 35
initialization_string : 36
program              : 2 16 0
statement            : 1 2
structure            : 9
whileloop            : 17

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . statement program
    (7) statement -> . expression -
    (8) statement -> . assignation -
    (9) statement -> . structure
    (10) statement -> . initialization -
    (11) statement -> . PRINT TEXT -
    (12) statement -> . PRINT IDENTIFIER -
    (13) statement -> . PRINTERR TEXT -
    (14) statement -> . PRINTERR IDENTIFIER -
    (15) statement -> . BREAK -
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (46) assignation -> . IDENTIFIER AFFECTATION expression
    (17) structure -> . whileloop bloc
    (18) structure -> . forloop bloc
    (19) structure -> . if bloc
    (20) structure -> . if bloc ELSE bloc
    (35) initialization -> . initialization_num
    (36) initialization -> . initialization_string
    (37) initialization -> . initialization_bool
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER
    (26) whileloop -> . WHILE ( comparison )
    (21) forloop -> . FOR ( initialization_num - comparison - expression )
    (22) forloop -> . FORNEG ( initialization_num - NUMBER )
    (23) forloop -> . FORNEG ( initialization_num - IDENTIFIER )
    (24) forloop -> . FORPOS ( initialization_num - NUMBER )
    (25) forloop -> . FORPOS ( initialization_num - IDENTIFIER )
    (27) if -> . IF ( comparison )
    (38) initialization_num -> . FLOAT IDENTIFIER AFFECTATION NUMBER
    (39) initialization_num -> . FLOAT IDENTIFIER AFFECTATION IDENTIFIER
    (40) initialization_num -> . INT IDENTIFIER AFFECTATION NUMBER
    (41) initialization_num -> . INT IDENTIFIER AFFECTATION IDENTIFIER
    (42) initialization_string -> . STRING IDENTIFIER AFFECTATION TEXT
    (43) initialization_bool -> . BOOLEAN IDENTIFIER AFFECTATION TRUE
    (44) initialization_bool -> . BOOLEAN IDENTIFIER AFFECTATION FALSE
    (45) initialization_bool -> . BOOLEAN IDENTIFIER AFFECTATION IDENTIFIER

    PRINT           shift and go to state 27
    PRINTERR        shift and go to state 23
    BREAK           shift and go to state 1
    (               shift and go to state 32
    IDENTIFIER      shift and go to state 10
    NUMBER          shift and go to state 13
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21
    WHILE           shift and go to state 25
    FOR             shift and go to state 8
    FORNEG          shift and go to state 3
    FORPOS          shift and go to state 34
    IF              shift and go to state 11
    FLOAT           shift and go to state 16
    INT             shift and go to state 30
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 31

    initialization_string          shift and go to state 6
    expression_op                  shift and go to state 7
    whileloop                      shift and go to state 9
    expression_incr                shift and go to state 17
    program                        shift and go to state 18
    initialization                 shift and go to state 28
    assignation                    shift and go to state 2
    expression                     shift and go to state 15
    expression_num                 shift and go to state 20
    expression_sign                shift and go to state 29
    if                             shift and go to state 33
    structure                      shift and go to state 12
    initialization_bool            shift and go to state 26
    forloop                        shift and go to state 14
    initialization_num             shift and go to state 4
    statement                      shift and go to state 22

state 1

    (15) statement -> BREAK . -

    -               shift and go to state 36


state 2

    (8) statement -> assignation . -

    -               shift and go to state 37


state 3

    (22) forloop -> FORNEG . ( initialization_num - NUMBER )
    (23) forloop -> FORNEG . ( initialization_num - IDENTIFIER )

    (               shift and go to state 38


state 4

    (35) initialization -> initialization_num .

    -               reduce using rule 35 (initialization -> initialization_num .)


state 5

    (49) expression_sign -> ADD_OP . expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_num                 shift and go to state 20
    expression_op                  shift and go to state 7
    expression_sign                shift and go to state 29
    expression                     shift and go to state 39
    expression_incr                shift and go to state 17

state 6

    (36) initialization -> initialization_string .

    -               reduce using rule 36 (initialization -> initialization_string .)


state 7

    (5) expression -> expression_op .

    ADD_OP          reduce using rule 5 (expression -> expression_op .)
    SUB_OP          reduce using rule 5 (expression -> expression_op .)
    MUL_OP          reduce using rule 5 (expression -> expression_op .)
    DIV_OP          reduce using rule 5 (expression -> expression_op .)
    -               reduce using rule 5 (expression -> expression_op .)
    )               reduce using rule 5 (expression -> expression_op .)
    GREATER_OP      reduce using rule 5 (expression -> expression_op .)
    LESSER_OP       reduce using rule 5 (expression -> expression_op .)
    EQUALS          reduce using rule 5 (expression -> expression_op .)
    GREATER_OR_EQUALS_OP reduce using rule 5 (expression -> expression_op .)
    LESSER_OR_EQUALS_OP reduce using rule 5 (expression -> expression_op .)
    NOT_EQUALS      reduce using rule 5 (expression -> expression_op .)


state 8

    (21) forloop -> FOR . ( initialization_num - comparison - expression )

    (               shift and go to state 41


state 9

    (17) structure -> whileloop . bloc
    (16) bloc -> . OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE      shift and go to state 42

    bloc                           shift and go to state 43

state 10

    (46) assignation -> IDENTIFIER . AFFECTATION expression
    (48) expression_num -> IDENTIFIER .

    AFFECTATION     shift and go to state 44
    -               reduce using rule 48 (expression_num -> IDENTIFIER .)
    ADD_OP          reduce using rule 48 (expression_num -> IDENTIFIER .)
    SUB_OP          reduce using rule 48 (expression_num -> IDENTIFIER .)
    MUL_OP          reduce using rule 48 (expression_num -> IDENTIFIER .)
    DIV_OP          reduce using rule 48 (expression_num -> IDENTIFIER .)


state 11

    (27) if -> IF . ( comparison )

    (               shift and go to state 45


state 12

    (9) statement -> structure .

    PRINT           reduce using rule 9 (statement -> structure .)
    PRINTERR        reduce using rule 9 (statement -> structure .)
    BREAK           reduce using rule 9 (statement -> structure .)
    (               reduce using rule 9 (statement -> structure .)
    IDENTIFIER      reduce using rule 9 (statement -> structure .)
    NUMBER          reduce using rule 9 (statement -> structure .)
    ADD_OP          reduce using rule 9 (statement -> structure .)
    SUB_OP          reduce using rule 9 (statement -> structure .)
    INCR_OP         reduce using rule 9 (statement -> structure .)
    DECR_OP         reduce using rule 9 (statement -> structure .)
    WHILE           reduce using rule 9 (statement -> structure .)
    FOR             reduce using rule 9 (statement -> structure .)
    FORNEG          reduce using rule 9 (statement -> structure .)
    FORPOS          reduce using rule 9 (statement -> structure .)
    IF              reduce using rule 9 (statement -> structure .)
    FLOAT           reduce using rule 9 (statement -> structure .)
    INT             reduce using rule 9 (statement -> structure .)
    STRING          reduce using rule 9 (statement -> structure .)
    BOOLEAN         reduce using rule 9 (statement -> structure .)
    CLOSE_BRACE     reduce using rule 9 (statement -> structure .)
    $end            reduce using rule 9 (statement -> structure .)


state 13

    (47) expression_num -> NUMBER .

    -               reduce using rule 47 (expression_num -> NUMBER .)
    ADD_OP          reduce using rule 47 (expression_num -> NUMBER .)
    SUB_OP          reduce using rule 47 (expression_num -> NUMBER .)
    MUL_OP          reduce using rule 47 (expression_num -> NUMBER .)
    DIV_OP          reduce using rule 47 (expression_num -> NUMBER .)
    )               reduce using rule 47 (expression_num -> NUMBER .)
    GREATER_OP      reduce using rule 47 (expression_num -> NUMBER .)
    LESSER_OP       reduce using rule 47 (expression_num -> NUMBER .)
    EQUALS          reduce using rule 47 (expression_num -> NUMBER .)
    GREATER_OR_EQUALS_OP reduce using rule 47 (expression_num -> NUMBER .)
    LESSER_OR_EQUALS_OP reduce using rule 47 (expression_num -> NUMBER .)
    NOT_EQUALS      reduce using rule 47 (expression_num -> NUMBER .)


state 14

    (18) structure -> forloop . bloc
    (16) bloc -> . OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE      shift and go to state 42

    bloc                           shift and go to state 46

state 15

    (7) statement -> expression . -
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    -               shift and go to state 47
    ADD_OP          shift and go to state 50
    SUB_OP          shift and go to state 51
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 48


state 16

    (38) initialization_num -> FLOAT . IDENTIFIER AFFECTATION NUMBER
    (39) initialization_num -> FLOAT . IDENTIFIER AFFECTATION IDENTIFIER

    IDENTIFIER      shift and go to state 52


state 17

    (6) expression -> expression_incr .

    ADD_OP          reduce using rule 6 (expression -> expression_incr .)
    SUB_OP          reduce using rule 6 (expression -> expression_incr .)
    MUL_OP          reduce using rule 6 (expression -> expression_incr .)
    DIV_OP          reduce using rule 6 (expression -> expression_incr .)
    -               reduce using rule 6 (expression -> expression_incr .)
    )               reduce using rule 6 (expression -> expression_incr .)
    GREATER_OP      reduce using rule 6 (expression -> expression_incr .)
    LESSER_OP       reduce using rule 6 (expression -> expression_incr .)
    EQUALS          reduce using rule 6 (expression -> expression_incr .)
    GREATER_OR_EQUALS_OP reduce using rule 6 (expression -> expression_incr .)
    LESSER_OR_EQUALS_OP reduce using rule 6 (expression -> expression_incr .)
    NOT_EQUALS      reduce using rule 6 (expression -> expression_incr .)


state 18

    (0) S' -> program .



state 19

    (42) initialization_string -> STRING . IDENTIFIER AFFECTATION TEXT

    IDENTIFIER      shift and go to state 53


state 20

    (3) expression -> expression_num .

    ADD_OP          reduce using rule 3 (expression -> expression_num .)
    SUB_OP          reduce using rule 3 (expression -> expression_num .)
    MUL_OP          reduce using rule 3 (expression -> expression_num .)
    DIV_OP          reduce using rule 3 (expression -> expression_num .)
    -               reduce using rule 3 (expression -> expression_num .)
    )               reduce using rule 3 (expression -> expression_num .)
    GREATER_OP      reduce using rule 3 (expression -> expression_num .)
    LESSER_OP       reduce using rule 3 (expression -> expression_num .)
    EQUALS          reduce using rule 3 (expression -> expression_num .)
    GREATER_OR_EQUALS_OP reduce using rule 3 (expression -> expression_num .)
    LESSER_OR_EQUALS_OP reduce using rule 3 (expression -> expression_num .)
    NOT_EQUALS      reduce using rule 3 (expression -> expression_num .)


state 21

    (56) expression_incr -> DECR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 54


state 22

    (1) program -> statement .
    (2) program -> statement . program
    (1) program -> . statement
    (2) program -> . statement program
    (7) statement -> . expression -
    (8) statement -> . assignation -
    (9) statement -> . structure
    (10) statement -> . initialization -
    (11) statement -> . PRINT TEXT -
    (12) statement -> . PRINT IDENTIFIER -
    (13) statement -> . PRINTERR TEXT -
    (14) statement -> . PRINTERR IDENTIFIER -
    (15) statement -> . BREAK -
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (46) assignation -> . IDENTIFIER AFFECTATION expression
    (17) structure -> . whileloop bloc
    (18) structure -> . forloop bloc
    (19) structure -> . if bloc
    (20) structure -> . if bloc ELSE bloc
    (35) initialization -> . initialization_num
    (36) initialization -> . initialization_string
    (37) initialization -> . initialization_bool
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER
    (26) whileloop -> . WHILE ( comparison )
    (21) forloop -> . FOR ( initialization_num - comparison - expression )
    (22) forloop -> . FORNEG ( initialization_num - NUMBER )
    (23) forloop -> . FORNEG ( initialization_num - IDENTIFIER )
    (24) forloop -> . FORPOS ( initialization_num - NUMBER )
    (25) forloop -> . FORPOS ( initialization_num - IDENTIFIER )
    (27) if -> . IF ( comparison )
    (38) initialization_num -> . FLOAT IDENTIFIER AFFECTATION NUMBER
    (39) initialization_num -> . FLOAT IDENTIFIER AFFECTATION IDENTIFIER
    (40) initialization_num -> . INT IDENTIFIER AFFECTATION NUMBER
    (41) initialization_num -> . INT IDENTIFIER AFFECTATION IDENTIFIER
    (42) initialization_string -> . STRING IDENTIFIER AFFECTATION TEXT
    (43) initialization_bool -> . BOOLEAN IDENTIFIER AFFECTATION TRUE
    (44) initialization_bool -> . BOOLEAN IDENTIFIER AFFECTATION FALSE
    (45) initialization_bool -> . BOOLEAN IDENTIFIER AFFECTATION IDENTIFIER

    $end            reduce using rule 1 (program -> statement .)
    CLOSE_BRACE     reduce using rule 1 (program -> statement .)
    PRINT           shift and go to state 27
    PRINTERR        shift and go to state 23
    BREAK           shift and go to state 1
    (               shift and go to state 32
    IDENTIFIER      shift and go to state 10
    NUMBER          shift and go to state 13
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21
    WHILE           shift and go to state 25
    FOR             shift and go to state 8
    FORNEG          shift and go to state 3
    FORPOS          shift and go to state 34
    IF              shift and go to state 11
    FLOAT           shift and go to state 16
    INT             shift and go to state 30
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 31

    initialization_string          shift and go to state 6
    expression_op                  shift and go to state 7
    whileloop                      shift and go to state 9
    expression_incr                shift and go to state 17
    program                        shift and go to state 55
    initialization                 shift and go to state 28
    assignation                    shift and go to state 2
    expression                     shift and go to state 15
    expression_num                 shift and go to state 20
    expression_sign                shift and go to state 29
    if                             shift and go to state 33
    structure                      shift and go to state 12
    initialization_bool            shift and go to state 26
    forloop                        shift and go to state 14
    initialization_num             shift and go to state 4
    statement                      shift and go to state 22

state 23

    (13) statement -> PRINTERR . TEXT -
    (14) statement -> PRINTERR . IDENTIFIER -

    TEXT            shift and go to state 56
    IDENTIFIER      shift and go to state 57


state 24

    (55) expression_incr -> INCR_OP . IDENTIFIER

    IDENTIFIER      shift and go to state 58


state 25

    (26) whileloop -> WHILE . ( comparison )

    (               shift and go to state 59


state 26

    (37) initialization -> initialization_bool .

    -               reduce using rule 37 (initialization -> initialization_bool .)


state 27

    (11) statement -> PRINT . TEXT -
    (12) statement -> PRINT . IDENTIFIER -

    TEXT            shift and go to state 60
    IDENTIFIER      shift and go to state 61


state 28

    (10) statement -> initialization . -

    -               shift and go to state 62


state 29

    (4) expression -> expression_sign .

    ADD_OP          reduce using rule 4 (expression -> expression_sign .)
    SUB_OP          reduce using rule 4 (expression -> expression_sign .)
    MUL_OP          reduce using rule 4 (expression -> expression_sign .)
    DIV_OP          reduce using rule 4 (expression -> expression_sign .)
    -               reduce using rule 4 (expression -> expression_sign .)
    )               reduce using rule 4 (expression -> expression_sign .)
    GREATER_OP      reduce using rule 4 (expression -> expression_sign .)
    LESSER_OP       reduce using rule 4 (expression -> expression_sign .)
    EQUALS          reduce using rule 4 (expression -> expression_sign .)
    GREATER_OR_EQUALS_OP reduce using rule 4 (expression -> expression_sign .)
    LESSER_OR_EQUALS_OP reduce using rule 4 (expression -> expression_sign .)
    NOT_EQUALS      reduce using rule 4 (expression -> expression_sign .)


state 30

    (40) initialization_num -> INT . IDENTIFIER AFFECTATION NUMBER
    (41) initialization_num -> INT . IDENTIFIER AFFECTATION IDENTIFIER

    IDENTIFIER      shift and go to state 63


state 31

    (43) initialization_bool -> BOOLEAN . IDENTIFIER AFFECTATION TRUE
    (44) initialization_bool -> BOOLEAN . IDENTIFIER AFFECTATION FALSE
    (45) initialization_bool -> BOOLEAN . IDENTIFIER AFFECTATION IDENTIFIER

    IDENTIFIER      shift and go to state 64


state 32

    (57) expression -> ( . expression )
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_num                 shift and go to state 20
    expression_op                  shift and go to state 7
    expression_sign                shift and go to state 29
    expression                     shift and go to state 65
    expression_incr                shift and go to state 17

state 33

    (19) structure -> if . bloc
    (20) structure -> if . bloc ELSE bloc
    (16) bloc -> . OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE      shift and go to state 42

    bloc                           shift and go to state 66

state 34

    (24) forloop -> FORPOS . ( initialization_num - NUMBER )
    (25) forloop -> FORPOS . ( initialization_num - IDENTIFIER )

    (               shift and go to state 67


state 35

    (50) expression_sign -> SUB_OP . expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_num                 shift and go to state 20
    expression_op                  shift and go to state 7
    expression_sign                shift and go to state 29
    expression                     shift and go to state 68
    expression_incr                shift and go to state 17

state 36

    (15) statement -> BREAK - .

    PRINT           reduce using rule 15 (statement -> BREAK - .)
    PRINTERR        reduce using rule 15 (statement -> BREAK - .)
    BREAK           reduce using rule 15 (statement -> BREAK - .)
    (               reduce using rule 15 (statement -> BREAK - .)
    IDENTIFIER      reduce using rule 15 (statement -> BREAK - .)
    NUMBER          reduce using rule 15 (statement -> BREAK - .)
    ADD_OP          reduce using rule 15 (statement -> BREAK - .)
    SUB_OP          reduce using rule 15 (statement -> BREAK - .)
    INCR_OP         reduce using rule 15 (statement -> BREAK - .)
    DECR_OP         reduce using rule 15 (statement -> BREAK - .)
    WHILE           reduce using rule 15 (statement -> BREAK - .)
    FOR             reduce using rule 15 (statement -> BREAK - .)
    FORNEG          reduce using rule 15 (statement -> BREAK - .)
    FORPOS          reduce using rule 15 (statement -> BREAK - .)
    IF              reduce using rule 15 (statement -> BREAK - .)
    FLOAT           reduce using rule 15 (statement -> BREAK - .)
    INT             reduce using rule 15 (statement -> BREAK - .)
    STRING          reduce using rule 15 (statement -> BREAK - .)
    BOOLEAN         reduce using rule 15 (statement -> BREAK - .)
    CLOSE_BRACE     reduce using rule 15 (statement -> BREAK - .)
    $end            reduce using rule 15 (statement -> BREAK - .)


state 37

    (8) statement -> assignation - .

    PRINT           reduce using rule 8 (statement -> assignation - .)
    PRINTERR        reduce using rule 8 (statement -> assignation - .)
    BREAK           reduce using rule 8 (statement -> assignation - .)
    (               reduce using rule 8 (statement -> assignation - .)
    IDENTIFIER      reduce using rule 8 (statement -> assignation - .)
    NUMBER          reduce using rule 8 (statement -> assignation - .)
    ADD_OP          reduce using rule 8 (statement -> assignation - .)
    SUB_OP          reduce using rule 8 (statement -> assignation - .)
    INCR_OP         reduce using rule 8 (statement -> assignation - .)
    DECR_OP         reduce using rule 8 (statement -> assignation - .)
    WHILE           reduce using rule 8 (statement -> assignation - .)
    FOR             reduce using rule 8 (statement -> assignation - .)
    FORNEG          reduce using rule 8 (statement -> assignation - .)
    FORPOS          reduce using rule 8 (statement -> assignation - .)
    IF              reduce using rule 8 (statement -> assignation - .)
    FLOAT           reduce using rule 8 (statement -> assignation - .)
    INT             reduce using rule 8 (statement -> assignation - .)
    STRING          reduce using rule 8 (statement -> assignation - .)
    BOOLEAN         reduce using rule 8 (statement -> assignation - .)
    CLOSE_BRACE     reduce using rule 8 (statement -> assignation - .)
    $end            reduce using rule 8 (statement -> assignation - .)


state 38

    (22) forloop -> FORNEG ( . initialization_num - NUMBER )
    (23) forloop -> FORNEG ( . initialization_num - IDENTIFIER )
    (38) initialization_num -> . FLOAT IDENTIFIER AFFECTATION NUMBER
    (39) initialization_num -> . FLOAT IDENTIFIER AFFECTATION IDENTIFIER
    (40) initialization_num -> . INT IDENTIFIER AFFECTATION NUMBER
    (41) initialization_num -> . INT IDENTIFIER AFFECTATION IDENTIFIER

    FLOAT           shift and go to state 16
    INT             shift and go to state 30

    initialization_num             shift and go to state 69

state 39

    (49) expression_sign -> ADD_OP expression .
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    -               reduce using rule 49 (expression_sign -> ADD_OP expression .)
    ADD_OP          reduce using rule 49 (expression_sign -> ADD_OP expression .)
    SUB_OP          reduce using rule 49 (expression_sign -> ADD_OP expression .)
    MUL_OP          reduce using rule 49 (expression_sign -> ADD_OP expression .)
    DIV_OP          reduce using rule 49 (expression_sign -> ADD_OP expression .)
    )               reduce using rule 49 (expression_sign -> ADD_OP expression .)
    GREATER_OP      reduce using rule 49 (expression_sign -> ADD_OP expression .)
    LESSER_OP       reduce using rule 49 (expression_sign -> ADD_OP expression .)
    EQUALS          reduce using rule 49 (expression_sign -> ADD_OP expression .)
    GREATER_OR_EQUALS_OP reduce using rule 49 (expression_sign -> ADD_OP expression .)
    LESSER_OR_EQUALS_OP reduce using rule 49 (expression_sign -> ADD_OP expression .)
    NOT_EQUALS      reduce using rule 49 (expression_sign -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 50 ]
  ! SUB_OP          [ shift and go to state 51 ]
  ! MUL_OP          [ shift and go to state 49 ]
  ! DIV_OP          [ shift and go to state 48 ]


state 40

    (48) expression_num -> IDENTIFIER .

    ADD_OP          reduce using rule 48 (expression_num -> IDENTIFIER .)
    SUB_OP          reduce using rule 48 (expression_num -> IDENTIFIER .)
    MUL_OP          reduce using rule 48 (expression_num -> IDENTIFIER .)
    DIV_OP          reduce using rule 48 (expression_num -> IDENTIFIER .)
    -               reduce using rule 48 (expression_num -> IDENTIFIER .)
    )               reduce using rule 48 (expression_num -> IDENTIFIER .)
    GREATER_OP      reduce using rule 48 (expression_num -> IDENTIFIER .)
    LESSER_OP       reduce using rule 48 (expression_num -> IDENTIFIER .)
    EQUALS          reduce using rule 48 (expression_num -> IDENTIFIER .)
    GREATER_OR_EQUALS_OP reduce using rule 48 (expression_num -> IDENTIFIER .)
    LESSER_OR_EQUALS_OP reduce using rule 48 (expression_num -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 48 (expression_num -> IDENTIFIER .)


state 41

    (21) forloop -> FOR ( . initialization_num - comparison - expression )
    (38) initialization_num -> . FLOAT IDENTIFIER AFFECTATION NUMBER
    (39) initialization_num -> . FLOAT IDENTIFIER AFFECTATION IDENTIFIER
    (40) initialization_num -> . INT IDENTIFIER AFFECTATION NUMBER
    (41) initialization_num -> . INT IDENTIFIER AFFECTATION IDENTIFIER

    FLOAT           shift and go to state 16
    INT             shift and go to state 30

    initialization_num             shift and go to state 70

state 42

    (16) bloc -> OPEN_BRACE . program CLOSE_BRACE
    (1) program -> . statement
    (2) program -> . statement program
    (7) statement -> . expression -
    (8) statement -> . assignation -
    (9) statement -> . structure
    (10) statement -> . initialization -
    (11) statement -> . PRINT TEXT -
    (12) statement -> . PRINT IDENTIFIER -
    (13) statement -> . PRINTERR TEXT -
    (14) statement -> . PRINTERR IDENTIFIER -
    (15) statement -> . BREAK -
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (46) assignation -> . IDENTIFIER AFFECTATION expression
    (17) structure -> . whileloop bloc
    (18) structure -> . forloop bloc
    (19) structure -> . if bloc
    (20) structure -> . if bloc ELSE bloc
    (35) initialization -> . initialization_num
    (36) initialization -> . initialization_string
    (37) initialization -> . initialization_bool
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER
    (26) whileloop -> . WHILE ( comparison )
    (21) forloop -> . FOR ( initialization_num - comparison - expression )
    (22) forloop -> . FORNEG ( initialization_num - NUMBER )
    (23) forloop -> . FORNEG ( initialization_num - IDENTIFIER )
    (24) forloop -> . FORPOS ( initialization_num - NUMBER )
    (25) forloop -> . FORPOS ( initialization_num - IDENTIFIER )
    (27) if -> . IF ( comparison )
    (38) initialization_num -> . FLOAT IDENTIFIER AFFECTATION NUMBER
    (39) initialization_num -> . FLOAT IDENTIFIER AFFECTATION IDENTIFIER
    (40) initialization_num -> . INT IDENTIFIER AFFECTATION NUMBER
    (41) initialization_num -> . INT IDENTIFIER AFFECTATION IDENTIFIER
    (42) initialization_string -> . STRING IDENTIFIER AFFECTATION TEXT
    (43) initialization_bool -> . BOOLEAN IDENTIFIER AFFECTATION TRUE
    (44) initialization_bool -> . BOOLEAN IDENTIFIER AFFECTATION FALSE
    (45) initialization_bool -> . BOOLEAN IDENTIFIER AFFECTATION IDENTIFIER

    PRINT           shift and go to state 27
    PRINTERR        shift and go to state 23
    BREAK           shift and go to state 1
    (               shift and go to state 32
    IDENTIFIER      shift and go to state 10
    NUMBER          shift and go to state 13
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21
    WHILE           shift and go to state 25
    FOR             shift and go to state 8
    FORNEG          shift and go to state 3
    FORPOS          shift and go to state 34
    IF              shift and go to state 11
    FLOAT           shift and go to state 16
    INT             shift and go to state 30
    STRING          shift and go to state 19
    BOOLEAN         shift and go to state 31

    initialization_string          shift and go to state 6
    expression_op                  shift and go to state 7
    whileloop                      shift and go to state 9
    expression_incr                shift and go to state 17
    program                        shift and go to state 71
    initialization                 shift and go to state 28
    assignation                    shift and go to state 2
    expression                     shift and go to state 15
    expression_num                 shift and go to state 20
    expression_sign                shift and go to state 29
    if                             shift and go to state 33
    structure                      shift and go to state 12
    initialization_bool            shift and go to state 26
    forloop                        shift and go to state 14
    initialization_num             shift and go to state 4
    statement                      shift and go to state 22

state 43

    (17) structure -> whileloop bloc .

    PRINT           reduce using rule 17 (structure -> whileloop bloc .)
    PRINTERR        reduce using rule 17 (structure -> whileloop bloc .)
    BREAK           reduce using rule 17 (structure -> whileloop bloc .)
    (               reduce using rule 17 (structure -> whileloop bloc .)
    IDENTIFIER      reduce using rule 17 (structure -> whileloop bloc .)
    NUMBER          reduce using rule 17 (structure -> whileloop bloc .)
    ADD_OP          reduce using rule 17 (structure -> whileloop bloc .)
    SUB_OP          reduce using rule 17 (structure -> whileloop bloc .)
    INCR_OP         reduce using rule 17 (structure -> whileloop bloc .)
    DECR_OP         reduce using rule 17 (structure -> whileloop bloc .)
    WHILE           reduce using rule 17 (structure -> whileloop bloc .)
    FOR             reduce using rule 17 (structure -> whileloop bloc .)
    FORNEG          reduce using rule 17 (structure -> whileloop bloc .)
    FORPOS          reduce using rule 17 (structure -> whileloop bloc .)
    IF              reduce using rule 17 (structure -> whileloop bloc .)
    FLOAT           reduce using rule 17 (structure -> whileloop bloc .)
    INT             reduce using rule 17 (structure -> whileloop bloc .)
    STRING          reduce using rule 17 (structure -> whileloop bloc .)
    BOOLEAN         reduce using rule 17 (structure -> whileloop bloc .)
    $end            reduce using rule 17 (structure -> whileloop bloc .)
    CLOSE_BRACE     reduce using rule 17 (structure -> whileloop bloc .)


state 44

    (46) assignation -> IDENTIFIER AFFECTATION . expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_num                 shift and go to state 20
    expression_op                  shift and go to state 7
    expression_sign                shift and go to state 29
    expression                     shift and go to state 72
    expression_incr                shift and go to state 17

state 45

    (27) if -> IF ( . comparison )
    (34) comparison -> . expression comparison_operator expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_sign                shift and go to state 29
    expression                     shift and go to state 74
    expression_num                 shift and go to state 20
    comparison                     shift and go to state 73
    expression_incr                shift and go to state 17
    expression_op                  shift and go to state 7

state 46

    (18) structure -> forloop bloc .

    PRINT           reduce using rule 18 (structure -> forloop bloc .)
    PRINTERR        reduce using rule 18 (structure -> forloop bloc .)
    BREAK           reduce using rule 18 (structure -> forloop bloc .)
    (               reduce using rule 18 (structure -> forloop bloc .)
    IDENTIFIER      reduce using rule 18 (structure -> forloop bloc .)
    NUMBER          reduce using rule 18 (structure -> forloop bloc .)
    ADD_OP          reduce using rule 18 (structure -> forloop bloc .)
    SUB_OP          reduce using rule 18 (structure -> forloop bloc .)
    INCR_OP         reduce using rule 18 (structure -> forloop bloc .)
    DECR_OP         reduce using rule 18 (structure -> forloop bloc .)
    WHILE           reduce using rule 18 (structure -> forloop bloc .)
    FOR             reduce using rule 18 (structure -> forloop bloc .)
    FORNEG          reduce using rule 18 (structure -> forloop bloc .)
    FORPOS          reduce using rule 18 (structure -> forloop bloc .)
    IF              reduce using rule 18 (structure -> forloop bloc .)
    FLOAT           reduce using rule 18 (structure -> forloop bloc .)
    INT             reduce using rule 18 (structure -> forloop bloc .)
    STRING          reduce using rule 18 (structure -> forloop bloc .)
    BOOLEAN         reduce using rule 18 (structure -> forloop bloc .)
    $end            reduce using rule 18 (structure -> forloop bloc .)
    CLOSE_BRACE     reduce using rule 18 (structure -> forloop bloc .)


state 47

    (7) statement -> expression - .

    PRINT           reduce using rule 7 (statement -> expression - .)
    PRINTERR        reduce using rule 7 (statement -> expression - .)
    BREAK           reduce using rule 7 (statement -> expression - .)
    (               reduce using rule 7 (statement -> expression - .)
    IDENTIFIER      reduce using rule 7 (statement -> expression - .)
    NUMBER          reduce using rule 7 (statement -> expression - .)
    ADD_OP          reduce using rule 7 (statement -> expression - .)
    SUB_OP          reduce using rule 7 (statement -> expression - .)
    INCR_OP         reduce using rule 7 (statement -> expression - .)
    DECR_OP         reduce using rule 7 (statement -> expression - .)
    WHILE           reduce using rule 7 (statement -> expression - .)
    FOR             reduce using rule 7 (statement -> expression - .)
    FORNEG          reduce using rule 7 (statement -> expression - .)
    FORPOS          reduce using rule 7 (statement -> expression - .)
    IF              reduce using rule 7 (statement -> expression - .)
    FLOAT           reduce using rule 7 (statement -> expression - .)
    INT             reduce using rule 7 (statement -> expression - .)
    STRING          reduce using rule 7 (statement -> expression - .)
    BOOLEAN         reduce using rule 7 (statement -> expression - .)
    CLOSE_BRACE     reduce using rule 7 (statement -> expression - .)
    $end            reduce using rule 7 (statement -> expression - .)


state 48

    (54) expression_op -> expression DIV_OP . expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_num                 shift and go to state 20
    expression_op                  shift and go to state 7
    expression_sign                shift and go to state 29
    expression                     shift and go to state 75
    expression_incr                shift and go to state 17

state 49

    (53) expression_op -> expression MUL_OP . expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_num                 shift and go to state 20
    expression_op                  shift and go to state 7
    expression_sign                shift and go to state 29
    expression                     shift and go to state 76
    expression_incr                shift and go to state 17

state 50

    (51) expression_op -> expression ADD_OP . expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_num                 shift and go to state 20
    expression_op                  shift and go to state 7
    expression_sign                shift and go to state 29
    expression                     shift and go to state 77
    expression_incr                shift and go to state 17

state 51

    (52) expression_op -> expression SUB_OP . expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_num                 shift and go to state 20
    expression_op                  shift and go to state 7
    expression_sign                shift and go to state 29
    expression                     shift and go to state 78
    expression_incr                shift and go to state 17

state 52

    (38) initialization_num -> FLOAT IDENTIFIER . AFFECTATION NUMBER
    (39) initialization_num -> FLOAT IDENTIFIER . AFFECTATION IDENTIFIER

    AFFECTATION     shift and go to state 79


state 53

    (42) initialization_string -> STRING IDENTIFIER . AFFECTATION TEXT

    AFFECTATION     shift and go to state 80


state 54

    (56) expression_incr -> DECR_OP IDENTIFIER .

    ADD_OP          reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    SUB_OP          reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    MUL_OP          reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    DIV_OP          reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    -               reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    )               reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    GREATER_OP      reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    LESSER_OP       reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    EQUALS          reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    GREATER_OR_EQUALS_OP reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    LESSER_OR_EQUALS_OP reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)
    NOT_EQUALS      reduce using rule 56 (expression_incr -> DECR_OP IDENTIFIER .)


state 55

    (2) program -> statement program .

    $end            reduce using rule 2 (program -> statement program .)
    CLOSE_BRACE     reduce using rule 2 (program -> statement program .)


state 56

    (13) statement -> PRINTERR TEXT . -

    -               shift and go to state 81


state 57

    (14) statement -> PRINTERR IDENTIFIER . -

    -               shift and go to state 82


state 58

    (55) expression_incr -> INCR_OP IDENTIFIER .

    ADD_OP          reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    SUB_OP          reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    MUL_OP          reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    DIV_OP          reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    -               reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    )               reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    GREATER_OP      reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    LESSER_OP       reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    EQUALS          reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    GREATER_OR_EQUALS_OP reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    LESSER_OR_EQUALS_OP reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)
    NOT_EQUALS      reduce using rule 55 (expression_incr -> INCR_OP IDENTIFIER .)


state 59

    (26) whileloop -> WHILE ( . comparison )
    (34) comparison -> . expression comparison_operator expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_sign                shift and go to state 29
    expression                     shift and go to state 74
    expression_num                 shift and go to state 20
    comparison                     shift and go to state 83
    expression_incr                shift and go to state 17
    expression_op                  shift and go to state 7

state 60

    (11) statement -> PRINT TEXT . -

    -               shift and go to state 84


state 61

    (12) statement -> PRINT IDENTIFIER . -

    -               shift and go to state 85


state 62

    (10) statement -> initialization - .

    PRINT           reduce using rule 10 (statement -> initialization - .)
    PRINTERR        reduce using rule 10 (statement -> initialization - .)
    BREAK           reduce using rule 10 (statement -> initialization - .)
    (               reduce using rule 10 (statement -> initialization - .)
    IDENTIFIER      reduce using rule 10 (statement -> initialization - .)
    NUMBER          reduce using rule 10 (statement -> initialization - .)
    ADD_OP          reduce using rule 10 (statement -> initialization - .)
    SUB_OP          reduce using rule 10 (statement -> initialization - .)
    INCR_OP         reduce using rule 10 (statement -> initialization - .)
    DECR_OP         reduce using rule 10 (statement -> initialization - .)
    WHILE           reduce using rule 10 (statement -> initialization - .)
    FOR             reduce using rule 10 (statement -> initialization - .)
    FORNEG          reduce using rule 10 (statement -> initialization - .)
    FORPOS          reduce using rule 10 (statement -> initialization - .)
    IF              reduce using rule 10 (statement -> initialization - .)
    FLOAT           reduce using rule 10 (statement -> initialization - .)
    INT             reduce using rule 10 (statement -> initialization - .)
    STRING          reduce using rule 10 (statement -> initialization - .)
    BOOLEAN         reduce using rule 10 (statement -> initialization - .)
    CLOSE_BRACE     reduce using rule 10 (statement -> initialization - .)
    $end            reduce using rule 10 (statement -> initialization - .)


state 63

    (40) initialization_num -> INT IDENTIFIER . AFFECTATION NUMBER
    (41) initialization_num -> INT IDENTIFIER . AFFECTATION IDENTIFIER

    AFFECTATION     shift and go to state 86


state 64

    (43) initialization_bool -> BOOLEAN IDENTIFIER . AFFECTATION TRUE
    (44) initialization_bool -> BOOLEAN IDENTIFIER . AFFECTATION FALSE
    (45) initialization_bool -> BOOLEAN IDENTIFIER . AFFECTATION IDENTIFIER

    AFFECTATION     shift and go to state 87


state 65

    (57) expression -> ( expression . )
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    )               shift and go to state 88
    ADD_OP          shift and go to state 50
    SUB_OP          shift and go to state 51
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 48


state 66

    (19) structure -> if bloc .
    (20) structure -> if bloc . ELSE bloc

    PRINT           reduce using rule 19 (structure -> if bloc .)
    PRINTERR        reduce using rule 19 (structure -> if bloc .)
    BREAK           reduce using rule 19 (structure -> if bloc .)
    (               reduce using rule 19 (structure -> if bloc .)
    IDENTIFIER      reduce using rule 19 (structure -> if bloc .)
    NUMBER          reduce using rule 19 (structure -> if bloc .)
    ADD_OP          reduce using rule 19 (structure -> if bloc .)
    SUB_OP          reduce using rule 19 (structure -> if bloc .)
    INCR_OP         reduce using rule 19 (structure -> if bloc .)
    DECR_OP         reduce using rule 19 (structure -> if bloc .)
    WHILE           reduce using rule 19 (structure -> if bloc .)
    FOR             reduce using rule 19 (structure -> if bloc .)
    FORNEG          reduce using rule 19 (structure -> if bloc .)
    FORPOS          reduce using rule 19 (structure -> if bloc .)
    IF              reduce using rule 19 (structure -> if bloc .)
    FLOAT           reduce using rule 19 (structure -> if bloc .)
    INT             reduce using rule 19 (structure -> if bloc .)
    STRING          reduce using rule 19 (structure -> if bloc .)
    BOOLEAN         reduce using rule 19 (structure -> if bloc .)
    $end            reduce using rule 19 (structure -> if bloc .)
    CLOSE_BRACE     reduce using rule 19 (structure -> if bloc .)
    ELSE            shift and go to state 89


state 67

    (24) forloop -> FORPOS ( . initialization_num - NUMBER )
    (25) forloop -> FORPOS ( . initialization_num - IDENTIFIER )
    (38) initialization_num -> . FLOAT IDENTIFIER AFFECTATION NUMBER
    (39) initialization_num -> . FLOAT IDENTIFIER AFFECTATION IDENTIFIER
    (40) initialization_num -> . INT IDENTIFIER AFFECTATION NUMBER
    (41) initialization_num -> . INT IDENTIFIER AFFECTATION IDENTIFIER

    FLOAT           shift and go to state 16
    INT             shift and go to state 30

    initialization_num             shift and go to state 90

state 68

    (50) expression_sign -> SUB_OP expression .
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    -               reduce using rule 50 (expression_sign -> SUB_OP expression .)
    ADD_OP          reduce using rule 50 (expression_sign -> SUB_OP expression .)
    SUB_OP          reduce using rule 50 (expression_sign -> SUB_OP expression .)
    MUL_OP          reduce using rule 50 (expression_sign -> SUB_OP expression .)
    DIV_OP          reduce using rule 50 (expression_sign -> SUB_OP expression .)
    )               reduce using rule 50 (expression_sign -> SUB_OP expression .)
    GREATER_OP      reduce using rule 50 (expression_sign -> SUB_OP expression .)
    LESSER_OP       reduce using rule 50 (expression_sign -> SUB_OP expression .)
    EQUALS          reduce using rule 50 (expression_sign -> SUB_OP expression .)
    GREATER_OR_EQUALS_OP reduce using rule 50 (expression_sign -> SUB_OP expression .)
    LESSER_OR_EQUALS_OP reduce using rule 50 (expression_sign -> SUB_OP expression .)
    NOT_EQUALS      reduce using rule 50 (expression_sign -> SUB_OP expression .)

  ! ADD_OP          [ shift and go to state 50 ]
  ! SUB_OP          [ shift and go to state 51 ]
  ! MUL_OP          [ shift and go to state 49 ]
  ! DIV_OP          [ shift and go to state 48 ]


state 69

    (22) forloop -> FORNEG ( initialization_num . - NUMBER )
    (23) forloop -> FORNEG ( initialization_num . - IDENTIFIER )

    -               shift and go to state 91


state 70

    (21) forloop -> FOR ( initialization_num . - comparison - expression )

    -               shift and go to state 92


state 71

    (16) bloc -> OPEN_BRACE program . CLOSE_BRACE

    CLOSE_BRACE     shift and go to state 93


state 72

    (46) assignation -> IDENTIFIER AFFECTATION expression .
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    -               reduce using rule 46 (assignation -> IDENTIFIER AFFECTATION expression .)
    ADD_OP          shift and go to state 50
    SUB_OP          shift and go to state 51
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 48


state 73

    (27) if -> IF ( comparison . )

    )               shift and go to state 94


state 74

    (34) comparison -> expression . comparison_operator expression
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression
    (28) comparison_operator -> . GREATER_OP
    (29) comparison_operator -> . LESSER_OP
    (30) comparison_operator -> . EQUALS
    (31) comparison_operator -> . GREATER_OR_EQUALS_OP
    (32) comparison_operator -> . LESSER_OR_EQUALS_OP
    (33) comparison_operator -> . NOT_EQUALS

    ADD_OP          shift and go to state 50
    SUB_OP          shift and go to state 51
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 48
    GREATER_OP      shift and go to state 99
    LESSER_OP       shift and go to state 96
    EQUALS          shift and go to state 100
    GREATER_OR_EQUALS_OP shift and go to state 101
    LESSER_OR_EQUALS_OP shift and go to state 95
    NOT_EQUALS      shift and go to state 97

    comparison_operator            shift and go to state 98

state 75

    (54) expression_op -> expression DIV_OP expression .
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    ADD_OP          reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    MUL_OP          reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    DIV_OP          reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    -               reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    )               reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    GREATER_OP      reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    LESSER_OP       reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    EQUALS          reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    GREATER_OR_EQUALS_OP reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    LESSER_OR_EQUALS_OP reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    NOT_EQUALS      reduce using rule 54 (expression_op -> expression DIV_OP expression .)
    SUB_OP          shift and go to state 51

  ! SUB_OP          [ reduce using rule 54 (expression_op -> expression DIV_OP expression .) ]
  ! ADD_OP          [ shift and go to state 50 ]
  ! MUL_OP          [ shift and go to state 49 ]
  ! DIV_OP          [ shift and go to state 48 ]


state 76

    (53) expression_op -> expression MUL_OP expression .
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    ADD_OP          reduce using rule 53 (expression_op -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 53 (expression_op -> expression MUL_OP expression .)
    -               reduce using rule 53 (expression_op -> expression MUL_OP expression .)
    )               reduce using rule 53 (expression_op -> expression MUL_OP expression .)
    GREATER_OP      reduce using rule 53 (expression_op -> expression MUL_OP expression .)
    LESSER_OP       reduce using rule 53 (expression_op -> expression MUL_OP expression .)
    EQUALS          reduce using rule 53 (expression_op -> expression MUL_OP expression .)
    GREATER_OR_EQUALS_OP reduce using rule 53 (expression_op -> expression MUL_OP expression .)
    LESSER_OR_EQUALS_OP reduce using rule 53 (expression_op -> expression MUL_OP expression .)
    NOT_EQUALS      reduce using rule 53 (expression_op -> expression MUL_OP expression .)
    SUB_OP          shift and go to state 51
    DIV_OP          shift and go to state 48

  ! SUB_OP          [ reduce using rule 53 (expression_op -> expression MUL_OP expression .) ]
  ! DIV_OP          [ reduce using rule 53 (expression_op -> expression MUL_OP expression .) ]
  ! ADD_OP          [ shift and go to state 50 ]
  ! MUL_OP          [ shift and go to state 49 ]


state 77

    (51) expression_op -> expression ADD_OP expression .
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    ADD_OP          reduce using rule 51 (expression_op -> expression ADD_OP expression .)
    -               reduce using rule 51 (expression_op -> expression ADD_OP expression .)
    )               reduce using rule 51 (expression_op -> expression ADD_OP expression .)
    GREATER_OP      reduce using rule 51 (expression_op -> expression ADD_OP expression .)
    LESSER_OP       reduce using rule 51 (expression_op -> expression ADD_OP expression .)
    EQUALS          reduce using rule 51 (expression_op -> expression ADD_OP expression .)
    GREATER_OR_EQUALS_OP reduce using rule 51 (expression_op -> expression ADD_OP expression .)
    LESSER_OR_EQUALS_OP reduce using rule 51 (expression_op -> expression ADD_OP expression .)
    NOT_EQUALS      reduce using rule 51 (expression_op -> expression ADD_OP expression .)
    SUB_OP          shift and go to state 51
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 48

  ! SUB_OP          [ reduce using rule 51 (expression_op -> expression ADD_OP expression .) ]
  ! MUL_OP          [ reduce using rule 51 (expression_op -> expression ADD_OP expression .) ]
  ! DIV_OP          [ reduce using rule 51 (expression_op -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 50 ]


state 78

    (52) expression_op -> expression SUB_OP expression .
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    ADD_OP          reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    SUB_OP          reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    MUL_OP          reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    DIV_OP          reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    -               reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    )               reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    GREATER_OP      reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    LESSER_OP       reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    EQUALS          reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    GREATER_OR_EQUALS_OP reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    LESSER_OR_EQUALS_OP reduce using rule 52 (expression_op -> expression SUB_OP expression .)
    NOT_EQUALS      reduce using rule 52 (expression_op -> expression SUB_OP expression .)

  ! ADD_OP          [ shift and go to state 50 ]
  ! SUB_OP          [ shift and go to state 51 ]
  ! MUL_OP          [ shift and go to state 49 ]
  ! DIV_OP          [ shift and go to state 48 ]


state 79

    (38) initialization_num -> FLOAT IDENTIFIER AFFECTATION . NUMBER
    (39) initialization_num -> FLOAT IDENTIFIER AFFECTATION . IDENTIFIER

    NUMBER          shift and go to state 102
    IDENTIFIER      shift and go to state 103


state 80

    (42) initialization_string -> STRING IDENTIFIER AFFECTATION . TEXT

    TEXT            shift and go to state 104


state 81

    (13) statement -> PRINTERR TEXT - .

    PRINT           reduce using rule 13 (statement -> PRINTERR TEXT - .)
    PRINTERR        reduce using rule 13 (statement -> PRINTERR TEXT - .)
    BREAK           reduce using rule 13 (statement -> PRINTERR TEXT - .)
    (               reduce using rule 13 (statement -> PRINTERR TEXT - .)
    IDENTIFIER      reduce using rule 13 (statement -> PRINTERR TEXT - .)
    NUMBER          reduce using rule 13 (statement -> PRINTERR TEXT - .)
    ADD_OP          reduce using rule 13 (statement -> PRINTERR TEXT - .)
    SUB_OP          reduce using rule 13 (statement -> PRINTERR TEXT - .)
    INCR_OP         reduce using rule 13 (statement -> PRINTERR TEXT - .)
    DECR_OP         reduce using rule 13 (statement -> PRINTERR TEXT - .)
    WHILE           reduce using rule 13 (statement -> PRINTERR TEXT - .)
    FOR             reduce using rule 13 (statement -> PRINTERR TEXT - .)
    FORNEG          reduce using rule 13 (statement -> PRINTERR TEXT - .)
    FORPOS          reduce using rule 13 (statement -> PRINTERR TEXT - .)
    IF              reduce using rule 13 (statement -> PRINTERR TEXT - .)
    FLOAT           reduce using rule 13 (statement -> PRINTERR TEXT - .)
    INT             reduce using rule 13 (statement -> PRINTERR TEXT - .)
    STRING          reduce using rule 13 (statement -> PRINTERR TEXT - .)
    BOOLEAN         reduce using rule 13 (statement -> PRINTERR TEXT - .)
    CLOSE_BRACE     reduce using rule 13 (statement -> PRINTERR TEXT - .)
    $end            reduce using rule 13 (statement -> PRINTERR TEXT - .)


state 82

    (14) statement -> PRINTERR IDENTIFIER - .

    PRINT           reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    PRINTERR        reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    BREAK           reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    (               reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    IDENTIFIER      reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    NUMBER          reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    ADD_OP          reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    SUB_OP          reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    INCR_OP         reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    DECR_OP         reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    WHILE           reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    FOR             reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    FORNEG          reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    FORPOS          reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    IF              reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    FLOAT           reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    INT             reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    STRING          reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    BOOLEAN         reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    CLOSE_BRACE     reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)
    $end            reduce using rule 14 (statement -> PRINTERR IDENTIFIER - .)


state 83

    (26) whileloop -> WHILE ( comparison . )

    )               shift and go to state 105


state 84

    (11) statement -> PRINT TEXT - .

    PRINT           reduce using rule 11 (statement -> PRINT TEXT - .)
    PRINTERR        reduce using rule 11 (statement -> PRINT TEXT - .)
    BREAK           reduce using rule 11 (statement -> PRINT TEXT - .)
    (               reduce using rule 11 (statement -> PRINT TEXT - .)
    IDENTIFIER      reduce using rule 11 (statement -> PRINT TEXT - .)
    NUMBER          reduce using rule 11 (statement -> PRINT TEXT - .)
    ADD_OP          reduce using rule 11 (statement -> PRINT TEXT - .)
    SUB_OP          reduce using rule 11 (statement -> PRINT TEXT - .)
    INCR_OP         reduce using rule 11 (statement -> PRINT TEXT - .)
    DECR_OP         reduce using rule 11 (statement -> PRINT TEXT - .)
    WHILE           reduce using rule 11 (statement -> PRINT TEXT - .)
    FOR             reduce using rule 11 (statement -> PRINT TEXT - .)
    FORNEG          reduce using rule 11 (statement -> PRINT TEXT - .)
    FORPOS          reduce using rule 11 (statement -> PRINT TEXT - .)
    IF              reduce using rule 11 (statement -> PRINT TEXT - .)
    FLOAT           reduce using rule 11 (statement -> PRINT TEXT - .)
    INT             reduce using rule 11 (statement -> PRINT TEXT - .)
    STRING          reduce using rule 11 (statement -> PRINT TEXT - .)
    BOOLEAN         reduce using rule 11 (statement -> PRINT TEXT - .)
    CLOSE_BRACE     reduce using rule 11 (statement -> PRINT TEXT - .)
    $end            reduce using rule 11 (statement -> PRINT TEXT - .)


state 85

    (12) statement -> PRINT IDENTIFIER - .

    PRINT           reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    PRINTERR        reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    BREAK           reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    (               reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    IDENTIFIER      reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    NUMBER          reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    ADD_OP          reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    SUB_OP          reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    INCR_OP         reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    DECR_OP         reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    WHILE           reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    FOR             reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    FORNEG          reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    FORPOS          reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    IF              reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    FLOAT           reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    INT             reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    STRING          reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    BOOLEAN         reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    CLOSE_BRACE     reduce using rule 12 (statement -> PRINT IDENTIFIER - .)
    $end            reduce using rule 12 (statement -> PRINT IDENTIFIER - .)


state 86

    (40) initialization_num -> INT IDENTIFIER AFFECTATION . NUMBER
    (41) initialization_num -> INT IDENTIFIER AFFECTATION . IDENTIFIER

    NUMBER          shift and go to state 106
    IDENTIFIER      shift and go to state 107


state 87

    (43) initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION . TRUE
    (44) initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION . FALSE
    (45) initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION . IDENTIFIER

    TRUE            shift and go to state 108
    FALSE           shift and go to state 110
    IDENTIFIER      shift and go to state 109


state 88

    (57) expression -> ( expression ) .

    ADD_OP          reduce using rule 57 (expression -> ( expression ) .)
    SUB_OP          reduce using rule 57 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 57 (expression -> ( expression ) .)
    DIV_OP          reduce using rule 57 (expression -> ( expression ) .)
    -               reduce using rule 57 (expression -> ( expression ) .)
    )               reduce using rule 57 (expression -> ( expression ) .)
    GREATER_OP      reduce using rule 57 (expression -> ( expression ) .)
    LESSER_OP       reduce using rule 57 (expression -> ( expression ) .)
    EQUALS          reduce using rule 57 (expression -> ( expression ) .)
    GREATER_OR_EQUALS_OP reduce using rule 57 (expression -> ( expression ) .)
    LESSER_OR_EQUALS_OP reduce using rule 57 (expression -> ( expression ) .)
    NOT_EQUALS      reduce using rule 57 (expression -> ( expression ) .)


state 89

    (20) structure -> if bloc ELSE . bloc
    (16) bloc -> . OPEN_BRACE program CLOSE_BRACE

    OPEN_BRACE      shift and go to state 42

    bloc                           shift and go to state 111

state 90

    (24) forloop -> FORPOS ( initialization_num . - NUMBER )
    (25) forloop -> FORPOS ( initialization_num . - IDENTIFIER )

    -               shift and go to state 112


state 91

    (22) forloop -> FORNEG ( initialization_num - . NUMBER )
    (23) forloop -> FORNEG ( initialization_num - . IDENTIFIER )

    NUMBER          shift and go to state 114
    IDENTIFIER      shift and go to state 113


state 92

    (21) forloop -> FOR ( initialization_num - . comparison - expression )
    (34) comparison -> . expression comparison_operator expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    comparison                     shift and go to state 115
    expression                     shift and go to state 74
    expression_num                 shift and go to state 20
    expression_sign                shift and go to state 29
    expression_incr                shift and go to state 17
    expression_op                  shift and go to state 7

state 93

    (16) bloc -> OPEN_BRACE program CLOSE_BRACE .

    PRINT           reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    PRINTERR        reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    BREAK           reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    (               reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    IDENTIFIER      reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    NUMBER          reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    ADD_OP          reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    SUB_OP          reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    INCR_OP         reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    DECR_OP         reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    WHILE           reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    FOR             reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    FORNEG          reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    FORPOS          reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    IF              reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    FLOAT           reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    INT             reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    STRING          reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    BOOLEAN         reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    $end            reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)
    ELSE            reduce using rule 16 (bloc -> OPEN_BRACE program CLOSE_BRACE .)


state 94

    (27) if -> IF ( comparison ) .

    OPEN_BRACE      reduce using rule 27 (if -> IF ( comparison ) .)


state 95

    (32) comparison_operator -> LESSER_OR_EQUALS_OP .

    (               reduce using rule 32 (comparison_operator -> LESSER_OR_EQUALS_OP .)
    NUMBER          reduce using rule 32 (comparison_operator -> LESSER_OR_EQUALS_OP .)
    IDENTIFIER      reduce using rule 32 (comparison_operator -> LESSER_OR_EQUALS_OP .)
    ADD_OP          reduce using rule 32 (comparison_operator -> LESSER_OR_EQUALS_OP .)
    SUB_OP          reduce using rule 32 (comparison_operator -> LESSER_OR_EQUALS_OP .)
    INCR_OP         reduce using rule 32 (comparison_operator -> LESSER_OR_EQUALS_OP .)
    DECR_OP         reduce using rule 32 (comparison_operator -> LESSER_OR_EQUALS_OP .)


state 96

    (29) comparison_operator -> LESSER_OP .

    (               reduce using rule 29 (comparison_operator -> LESSER_OP .)
    NUMBER          reduce using rule 29 (comparison_operator -> LESSER_OP .)
    IDENTIFIER      reduce using rule 29 (comparison_operator -> LESSER_OP .)
    ADD_OP          reduce using rule 29 (comparison_operator -> LESSER_OP .)
    SUB_OP          reduce using rule 29 (comparison_operator -> LESSER_OP .)
    INCR_OP         reduce using rule 29 (comparison_operator -> LESSER_OP .)
    DECR_OP         reduce using rule 29 (comparison_operator -> LESSER_OP .)


state 97

    (33) comparison_operator -> NOT_EQUALS .

    (               reduce using rule 33 (comparison_operator -> NOT_EQUALS .)
    NUMBER          reduce using rule 33 (comparison_operator -> NOT_EQUALS .)
    IDENTIFIER      reduce using rule 33 (comparison_operator -> NOT_EQUALS .)
    ADD_OP          reduce using rule 33 (comparison_operator -> NOT_EQUALS .)
    SUB_OP          reduce using rule 33 (comparison_operator -> NOT_EQUALS .)
    INCR_OP         reduce using rule 33 (comparison_operator -> NOT_EQUALS .)
    DECR_OP         reduce using rule 33 (comparison_operator -> NOT_EQUALS .)


state 98

    (34) comparison -> expression comparison_operator . expression
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_sign                shift and go to state 29
    expression                     shift and go to state 116
    expression_num                 shift and go to state 20
    expression_op                  shift and go to state 7
    expression_incr                shift and go to state 17

state 99

    (28) comparison_operator -> GREATER_OP .

    (               reduce using rule 28 (comparison_operator -> GREATER_OP .)
    NUMBER          reduce using rule 28 (comparison_operator -> GREATER_OP .)
    IDENTIFIER      reduce using rule 28 (comparison_operator -> GREATER_OP .)
    ADD_OP          reduce using rule 28 (comparison_operator -> GREATER_OP .)
    SUB_OP          reduce using rule 28 (comparison_operator -> GREATER_OP .)
    INCR_OP         reduce using rule 28 (comparison_operator -> GREATER_OP .)
    DECR_OP         reduce using rule 28 (comparison_operator -> GREATER_OP .)


state 100

    (30) comparison_operator -> EQUALS .

    (               reduce using rule 30 (comparison_operator -> EQUALS .)
    NUMBER          reduce using rule 30 (comparison_operator -> EQUALS .)
    IDENTIFIER      reduce using rule 30 (comparison_operator -> EQUALS .)
    ADD_OP          reduce using rule 30 (comparison_operator -> EQUALS .)
    SUB_OP          reduce using rule 30 (comparison_operator -> EQUALS .)
    INCR_OP         reduce using rule 30 (comparison_operator -> EQUALS .)
    DECR_OP         reduce using rule 30 (comparison_operator -> EQUALS .)


state 101

    (31) comparison_operator -> GREATER_OR_EQUALS_OP .

    (               reduce using rule 31 (comparison_operator -> GREATER_OR_EQUALS_OP .)
    NUMBER          reduce using rule 31 (comparison_operator -> GREATER_OR_EQUALS_OP .)
    IDENTIFIER      reduce using rule 31 (comparison_operator -> GREATER_OR_EQUALS_OP .)
    ADD_OP          reduce using rule 31 (comparison_operator -> GREATER_OR_EQUALS_OP .)
    SUB_OP          reduce using rule 31 (comparison_operator -> GREATER_OR_EQUALS_OP .)
    INCR_OP         reduce using rule 31 (comparison_operator -> GREATER_OR_EQUALS_OP .)
    DECR_OP         reduce using rule 31 (comparison_operator -> GREATER_OR_EQUALS_OP .)


state 102

    (38) initialization_num -> FLOAT IDENTIFIER AFFECTATION NUMBER .

    -               reduce using rule 38 (initialization_num -> FLOAT IDENTIFIER AFFECTATION NUMBER .)


state 103

    (39) initialization_num -> FLOAT IDENTIFIER AFFECTATION IDENTIFIER .

    -               reduce using rule 39 (initialization_num -> FLOAT IDENTIFIER AFFECTATION IDENTIFIER .)


state 104

    (42) initialization_string -> STRING IDENTIFIER AFFECTATION TEXT .

    -               reduce using rule 42 (initialization_string -> STRING IDENTIFIER AFFECTATION TEXT .)


state 105

    (26) whileloop -> WHILE ( comparison ) .

    OPEN_BRACE      reduce using rule 26 (whileloop -> WHILE ( comparison ) .)


state 106

    (40) initialization_num -> INT IDENTIFIER AFFECTATION NUMBER .

    -               reduce using rule 40 (initialization_num -> INT IDENTIFIER AFFECTATION NUMBER .)


state 107

    (41) initialization_num -> INT IDENTIFIER AFFECTATION IDENTIFIER .

    -               reduce using rule 41 (initialization_num -> INT IDENTIFIER AFFECTATION IDENTIFIER .)


state 108

    (43) initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION TRUE .

    -               reduce using rule 43 (initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION TRUE .)


state 109

    (45) initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION IDENTIFIER .

    -               reduce using rule 45 (initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION IDENTIFIER .)


state 110

    (44) initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION FALSE .

    -               reduce using rule 44 (initialization_bool -> BOOLEAN IDENTIFIER AFFECTATION FALSE .)


state 111

    (20) structure -> if bloc ELSE bloc .

    PRINT           reduce using rule 20 (structure -> if bloc ELSE bloc .)
    PRINTERR        reduce using rule 20 (structure -> if bloc ELSE bloc .)
    BREAK           reduce using rule 20 (structure -> if bloc ELSE bloc .)
    (               reduce using rule 20 (structure -> if bloc ELSE bloc .)
    IDENTIFIER      reduce using rule 20 (structure -> if bloc ELSE bloc .)
    NUMBER          reduce using rule 20 (structure -> if bloc ELSE bloc .)
    ADD_OP          reduce using rule 20 (structure -> if bloc ELSE bloc .)
    SUB_OP          reduce using rule 20 (structure -> if bloc ELSE bloc .)
    INCR_OP         reduce using rule 20 (structure -> if bloc ELSE bloc .)
    DECR_OP         reduce using rule 20 (structure -> if bloc ELSE bloc .)
    WHILE           reduce using rule 20 (structure -> if bloc ELSE bloc .)
    FOR             reduce using rule 20 (structure -> if bloc ELSE bloc .)
    FORNEG          reduce using rule 20 (structure -> if bloc ELSE bloc .)
    FORPOS          reduce using rule 20 (structure -> if bloc ELSE bloc .)
    IF              reduce using rule 20 (structure -> if bloc ELSE bloc .)
    FLOAT           reduce using rule 20 (structure -> if bloc ELSE bloc .)
    INT             reduce using rule 20 (structure -> if bloc ELSE bloc .)
    STRING          reduce using rule 20 (structure -> if bloc ELSE bloc .)
    BOOLEAN         reduce using rule 20 (structure -> if bloc ELSE bloc .)
    $end            reduce using rule 20 (structure -> if bloc ELSE bloc .)
    CLOSE_BRACE     reduce using rule 20 (structure -> if bloc ELSE bloc .)


state 112

    (24) forloop -> FORPOS ( initialization_num - . NUMBER )
    (25) forloop -> FORPOS ( initialization_num - . IDENTIFIER )

    NUMBER          shift and go to state 118
    IDENTIFIER      shift and go to state 117


state 113

    (23) forloop -> FORNEG ( initialization_num - IDENTIFIER . )

    )               shift and go to state 119


state 114

    (22) forloop -> FORNEG ( initialization_num - NUMBER . )

    )               shift and go to state 120


state 115

    (21) forloop -> FOR ( initialization_num - comparison . - expression )

    -               shift and go to state 121


state 116

    (34) comparison -> expression comparison_operator expression .
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    )               reduce using rule 34 (comparison -> expression comparison_operator expression .)
    -               reduce using rule 34 (comparison -> expression comparison_operator expression .)
    ADD_OP          shift and go to state 50
    SUB_OP          shift and go to state 51
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 48


state 117

    (25) forloop -> FORPOS ( initialization_num - IDENTIFIER . )

    )               shift and go to state 122


state 118

    (24) forloop -> FORPOS ( initialization_num - NUMBER . )

    )               shift and go to state 123


state 119

    (23) forloop -> FORNEG ( initialization_num - IDENTIFIER ) .

    OPEN_BRACE      reduce using rule 23 (forloop -> FORNEG ( initialization_num - IDENTIFIER ) .)


state 120

    (22) forloop -> FORNEG ( initialization_num - NUMBER ) .

    OPEN_BRACE      reduce using rule 22 (forloop -> FORNEG ( initialization_num - NUMBER ) .)


state 121

    (21) forloop -> FOR ( initialization_num - comparison - . expression )
    (3) expression -> . expression_num
    (4) expression -> . expression_sign
    (5) expression -> . expression_op
    (6) expression -> . expression_incr
    (57) expression -> . ( expression )
    (47) expression_num -> . NUMBER
    (48) expression_num -> . IDENTIFIER
    (49) expression_sign -> . ADD_OP expression
    (50) expression_sign -> . SUB_OP expression
    (51) expression_op -> . expression ADD_OP expression
    (52) expression_op -> . expression SUB_OP expression
    (53) expression_op -> . expression MUL_OP expression
    (54) expression_op -> . expression DIV_OP expression
    (55) expression_incr -> . INCR_OP IDENTIFIER
    (56) expression_incr -> . DECR_OP IDENTIFIER

    (               shift and go to state 32
    NUMBER          shift and go to state 13
    IDENTIFIER      shift and go to state 40
    ADD_OP          shift and go to state 5
    SUB_OP          shift and go to state 35
    INCR_OP         shift and go to state 24
    DECR_OP         shift and go to state 21

    expression_sign                shift and go to state 29
    expression                     shift and go to state 124
    expression_num                 shift and go to state 20
    expression_incr                shift and go to state 17
    expression_op                  shift and go to state 7

state 122

    (25) forloop -> FORPOS ( initialization_num - IDENTIFIER ) .

    OPEN_BRACE      reduce using rule 25 (forloop -> FORPOS ( initialization_num - IDENTIFIER ) .)


state 123

    (24) forloop -> FORPOS ( initialization_num - NUMBER ) .

    OPEN_BRACE      reduce using rule 24 (forloop -> FORPOS ( initialization_num - NUMBER ) .)


state 124

    (21) forloop -> FOR ( initialization_num - comparison - expression . )
    (51) expression_op -> expression . ADD_OP expression
    (52) expression_op -> expression . SUB_OP expression
    (53) expression_op -> expression . MUL_OP expression
    (54) expression_op -> expression . DIV_OP expression

    )               shift and go to state 125
    ADD_OP          shift and go to state 50
    SUB_OP          shift and go to state 51
    MUL_OP          shift and go to state 49
    DIV_OP          shift and go to state 48


state 125

    (21) forloop -> FOR ( initialization_num - comparison - expression ) .

    OPEN_BRACE      reduce using rule 21 (forloop -> FOR ( initialization_num - comparison - expression ) .)

